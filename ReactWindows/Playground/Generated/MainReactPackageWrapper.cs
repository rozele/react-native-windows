//
// This file is generated by ReactPackageGenerator.tt
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
using ReactNative.Bridge;
using ReactNative.Modules.Core;
using ReactNative.UIManager;
using System.Collections.Generic;

namespace ReactNative.Shell
{
    class GeneratedMainReactPackage : IReactPackage
    {
        private readonly IReactPackage _reactPackage;

        public GeneratedMainReactPackage(IReactPackage reactPackage)
        {
            _reactPackage = reactPackage;
        }

        public IReadOnlyList<INativeModule> CreateNativeModules(ReactContext reactContext)
        {
            var nativeModules = _reactPackage.CreateNativeModules(reactContext);
            return new List<INativeModule>
            {
                new AccessibilityInfoModuleWrapper((ReactNative.Modules.Accessibilityinfo.AccessibilityInfoModule)nativeModules[0]),
                new AppStateModuleWrapper((ReactNative.Modules.AppState.AppStateModule)nativeModules[1]),
                new AsyncStorageModuleWrapper((ReactNative.Modules.Storage.AsyncStorageModule)nativeModules[2]),
                new ClipboardModuleWrapper((ReactNative.Modules.Clipboard.ClipboardModule)nativeModules[3]),
                new DialogModuleWrapper((ReactNative.Modules.Dialog.DialogModule)nativeModules[4]),
                new ImageLoaderModuleWrapper((ReactNative.Modules.Image.ImageLoaderModule)nativeModules[5]),
                new I18NModuleWrapper((ReactNative.Modules.I18N.I18NModule)nativeModules[6]),
                new LauncherModuleWrapper((ReactNative.Modules.Launch.LauncherModule)nativeModules[7]),
                new LocationModuleWrapper((ReactNative.Modules.Location.LocationModule)nativeModules[8]),
                new NativeAnimatedModuleWrapper((ReactNative.Animated.NativeAnimatedModule)nativeModules[9]),
                new NetworkingModuleWrapper((ReactNative.Modules.Network.NetworkingModule)nativeModules[10]),
                new NetInfoModuleWrapper((ReactNative.Modules.NetInfo.NetInfoModule)nativeModules[11]),
                new StatusBarModuleWrapper((ReactNative.Modules.StatusBar.StatusBarModule)nativeModules[12]),
                new VibrationModuleWrapper((ReactNative.Modules.Vibration.VibrationModule)nativeModules[13]),
                new WebSocketModuleWrapper((ReactNative.Modules.WebSocket.WebSocketModule)nativeModules[14]),
            };
        }

        public IReadOnlyList<IViewManager> CreateViewManagers(ReactContext reactContext)
        {
            return _reactPackage.CreateViewManagers(reactContext);
        }
        class AccessibilityInfoModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Accessibilityinfo.AccessibilityInfoModule>
        {
            public AccessibilityInfoModuleWrapper(ReactNative.Modules.Accessibilityinfo.AccessibilityInfoModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Accessibilityinfo.AccessibilityInfoModule.fetchIsHighContrast),
                            new NativeMethod("promise", (instance, args) =>
                                Module.fetchIsHighContrast(
                                    new Promise(
                                        new Callback(args[0].ToObject<int>(), instance),
                                        new Callback(args[1].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                    };
                }
            }
        }
        class AppStateModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.AppState.AppStateModule>
        {
            public AppStateModuleWrapper(ReactNative.Modules.AppState.AppStateModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.AppState.AppStateModule.getCurrentAppState),
                            new NativeMethod("async", (instance, args) =>
                                Module.getCurrentAppState(
                                    new Callback(args[0].ToObject<int>(), instance),
                                    new Callback(args[1].ToObject<int>(), instance)
                                )
                            )
                        },
                    };
                }
            }
        }
        class AsyncStorageModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Storage.AsyncStorageModule>
        {
            public AsyncStorageModuleWrapper(ReactNative.Modules.Storage.AsyncStorageModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Storage.AsyncStorageModule.multiGet),
                            new NativeMethod("async", (instance, args) =>
                                Module.multiGet(
                                    args[0].ToObject<System.String[]>(),
                                    new Callback(args[1].ToObject<int>(), instance)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Storage.AsyncStorageModule.multiSet),
                            new NativeMethod("async", (instance, args) =>
                                Module.multiSet(
                                    args[0].ToObject<System.String[][]>(),
                                    new Callback(args[1].ToObject<int>(), instance)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Storage.AsyncStorageModule.multiRemove),
                            new NativeMethod("async", (instance, args) =>
                                Module.multiRemove(
                                    args[0].ToObject<System.String[]>(),
                                    new Callback(args[1].ToObject<int>(), instance)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Storage.AsyncStorageModule.multiMerge),
                            new NativeMethod("async", (instance, args) =>
                                Module.multiMerge(
                                    args[0].ToObject<System.String[][]>(),
                                    new Callback(args[1].ToObject<int>(), instance)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Storage.AsyncStorageModule.clear),
                            new NativeMethod("async", (instance, args) =>
                                Module.clear(
                                    new Callback(args[0].ToObject<int>(), instance)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Storage.AsyncStorageModule.getAllKeys),
                            new NativeMethod("async", (instance, args) =>
                                Module.getAllKeys(
                                    new Callback(args[0].ToObject<int>(), instance)
                                )
                            )
                        },
                    };
                }
            }
        }
        class ClipboardModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Clipboard.ClipboardModule>
        {
            public ClipboardModuleWrapper(ReactNative.Modules.Clipboard.ClipboardModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Clipboard.ClipboardModule.getString),
                            new NativeMethod("promise", (instance, args) =>
                                Module.getString(
                                    new Promise(
                                        new Callback(args[0].ToObject<int>(), instance),
                                        new Callback(args[1].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Clipboard.ClipboardModule.setString),
                            new NativeMethod("async", (instance, args) =>
                                Module.setString(
                                    args[0].ToObject<System.String>()
                                )
                            )
                        },
                    };
                }
            }
        }
        class DialogModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Dialog.DialogModule>
        {
            public DialogModuleWrapper(ReactNative.Modules.Dialog.DialogModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Dialog.DialogModule.showAlert),
                            new NativeMethod("async", (instance, args) =>
                                Module.showAlert(
                                    (Newtonsoft.Json.Linq.JObject)args[0],
                                    new Callback(args[1].ToObject<int>(), instance),
                                    new Callback(args[2].ToObject<int>(), instance)
                                )
                            )
                        },
                    };
                }
            }
        }
        class ImageLoaderModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Image.ImageLoaderModule>
        {
            public ImageLoaderModuleWrapper(ReactNative.Modules.Image.ImageLoaderModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Image.ImageLoaderModule.prefetchImage),
                            new NativeMethod("promise", (instance, args) =>
                                Module.prefetchImage(
                                    args[0].ToObject<System.String>(),
                                    args[1].ToObject<System.Int32>(),
                                    new Promise(
                                        new Callback(args[2].ToObject<int>(), instance),
                                        new Callback(args[3].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Image.ImageLoaderModule.prefetchImageAndGetCachedPath),
                            new NativeMethod("promise", (instance, args) =>
                                Module.prefetchImageAndGetCachedPath(
                                    args[0].ToObject<System.String>(),
                                    args[1].ToObject<System.Int32>(),
                                    new Promise(
                                        new Callback(args[2].ToObject<int>(), instance),
                                        new Callback(args[3].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Image.ImageLoaderModule.abortRequest),
                            new NativeMethod("async", (instance, args) =>
                                Module.abortRequest(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Image.ImageLoaderModule.getSize),
                            new NativeMethod("promise", (instance, args) =>
                                Module.getSize(
                                    args[0].ToObject<System.String>(),
                                    new Promise(
                                        new Callback(args[1].ToObject<int>(), instance),
                                        new Callback(args[2].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Image.ImageLoaderModule.queryCache),
                            new NativeMethod("promise", (instance, args) =>
                                Module.queryCache(
                                    args[0].ToObject<System.String[]>(),
                                    new Promise(
                                        new Callback(args[1].ToObject<int>(), instance),
                                        new Callback(args[2].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                    };
                }
            }
        }
        class I18NModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.I18N.I18NModule>
        {
            public I18NModuleWrapper(ReactNative.Modules.I18N.I18NModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.I18N.I18NModule.allowRTL),
                            new NativeMethod("async", (instance, args) =>
                                Module.allowRTL(
                                    args[0].ToObject<System.Boolean>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.I18N.I18NModule.forceRTL),
                            new NativeMethod("async", (instance, args) =>
                                Module.forceRTL(
                                    args[0].ToObject<System.Boolean>()
                                )
                            )
                        },
                    };
                }
            }
        }
        class LauncherModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Launch.LauncherModule>
        {
            public LauncherModuleWrapper(ReactNative.Modules.Launch.LauncherModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Launch.LauncherModule.openURL),
                            new NativeMethod("promise", (instance, args) =>
                                Module.openURL(
                                    args[0].ToObject<System.String>(),
                                    new Promise(
                                        new Callback(args[1].ToObject<int>(), instance),
                                        new Callback(args[2].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Launch.LauncherModule.canOpenURL),
                            new NativeMethod("promise", (instance, args) =>
                                Module.canOpenURL(
                                    args[0].ToObject<System.String>(),
                                    new Promise(
                                        new Callback(args[1].ToObject<int>(), instance),
                                        new Callback(args[2].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Launch.LauncherModule.getInitialURL),
                            new NativeMethod("promise", (instance, args) =>
                                Module.getInitialURL(
                                    new Promise(
                                        new Callback(args[0].ToObject<int>(), instance),
                                        new Callback(args[1].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                    };
                }
            }
        }
        class LocationModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Location.LocationModule>
        {
            public LocationModuleWrapper(ReactNative.Modules.Location.LocationModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Location.LocationModule.getCurrentPosition),
                            new NativeMethod("async", (instance, args) =>
                                Module.getCurrentPosition(
                                    (Newtonsoft.Json.Linq.JObject)args[0],
                                    new Callback(args[1].ToObject<int>(), instance),
                                    new Callback(args[2].ToObject<int>(), instance)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Location.LocationModule.startObserving),
                            new NativeMethod("async", (instance, args) =>
                                Module.startObserving(
                                    (Newtonsoft.Json.Linq.JObject)args[0]
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Location.LocationModule.stopObserving),
                            new NativeMethod("async", (instance, args) =>
                                Module.stopObserving(
                                )
                            )
                        },
                    };
                }
            }
        }
        class NativeAnimatedModuleWrapper : NativeModuleWrapperBase<ReactNative.Animated.NativeAnimatedModule>
        {
            public NativeAnimatedModuleWrapper(ReactNative.Animated.NativeAnimatedModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.createAnimatedNode),
                            new NativeMethod("async", (instance, args) =>
                                Module.createAnimatedNode(
                                    args[0].ToObject<System.Int32>(),
                                    (Newtonsoft.Json.Linq.JObject)args[1]
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.startListeningToAnimatedNodeValue),
                            new NativeMethod("async", (instance, args) =>
                                Module.startListeningToAnimatedNodeValue(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.stopListeningToAnimatedNodeValue),
                            new NativeMethod("async", (instance, args) =>
                                Module.stopListeningToAnimatedNodeValue(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.dropAnimatedNode),
                            new NativeMethod("async", (instance, args) =>
                                Module.dropAnimatedNode(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.setAnimatedNodeValue),
                            new NativeMethod("async", (instance, args) =>
                                Module.setAnimatedNodeValue(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Double>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.setAnimatedNodeOffset),
                            new NativeMethod("async", (instance, args) =>
                                Module.setAnimatedNodeOffset(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Double>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.flattenAnimatedNodeOffset),
                            new NativeMethod("async", (instance, args) =>
                                Module.flattenAnimatedNodeOffset(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.extractAnimatedNodeOffset),
                            new NativeMethod("async", (instance, args) =>
                                Module.extractAnimatedNodeOffset(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.startAnimatingNode),
                            new NativeMethod("async", (instance, args) =>
                                Module.startAnimatingNode(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32>(),
                                    (Newtonsoft.Json.Linq.JObject)args[2],
                                    new Callback(args[3].ToObject<int>(), instance)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.stopAnimation),
                            new NativeMethod("async", (instance, args) =>
                                Module.stopAnimation(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.connectAnimatedNodes),
                            new NativeMethod("async", (instance, args) =>
                                Module.connectAnimatedNodes(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.disconnectAnimatedNodes),
                            new NativeMethod("async", (instance, args) =>
                                Module.disconnectAnimatedNodes(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.connectAnimatedNodeToView),
                            new NativeMethod("async", (instance, args) =>
                                Module.connectAnimatedNodeToView(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.disconnectAnimatedNodeFromView),
                            new NativeMethod("async", (instance, args) =>
                                Module.disconnectAnimatedNodeFromView(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.addAnimatedEventToView),
                            new NativeMethod("async", (instance, args) =>
                                Module.addAnimatedEventToView(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.String>(),
                                    (Newtonsoft.Json.Linq.JObject)args[2]
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Animated.NativeAnimatedModule.removeAnimatedEventFromView),
                            new NativeMethod("async", (instance, args) =>
                                Module.removeAnimatedEventFromView(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.String>(),
                                    args[2].ToObject<System.Int32>()
                                )
                            )
                        },
                    };
                }
            }
        }
        class NetworkingModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Network.NetworkingModule>
        {
            public NetworkingModuleWrapper(ReactNative.Modules.Network.NetworkingModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Network.NetworkingModule.sendRequest),
                            new NativeMethod("async", (instance, args) =>
                                Module.sendRequest(
                                    args[0].ToObject<System.String>(),
                                    args[1].ToObject<System.Uri>(),
                                    args[2].ToObject<System.Int32>(),
                                    args[3].ToObject<System.String[][]>(),
                                    (Newtonsoft.Json.Linq.JObject)args[4],
                                    args[5].ToObject<System.String>(),
                                    args[6].ToObject<System.Boolean>(),
                                    args[7].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Network.NetworkingModule.abortRequest),
                            new NativeMethod("async", (instance, args) =>
                                Module.abortRequest(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                    };
                }
            }
        }
        class NetInfoModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.NetInfo.NetInfoModule>
        {
            public NetInfoModuleWrapper(ReactNative.Modules.NetInfo.NetInfoModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.NetInfo.NetInfoModule.getCurrentConnectivity),
                            new NativeMethod("promise", (instance, args) =>
                                Module.getCurrentConnectivity(
                                    new Promise(
                                        new Callback(args[0].ToObject<int>(), instance),
                                        new Callback(args[1].ToObject<int>(), instance)
                                    )
                                )
                            )
                        },
                    };
                }
            }
        }
        class StatusBarModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.StatusBar.StatusBarModule>
        {
            public StatusBarModuleWrapper(ReactNative.Modules.StatusBar.StatusBarModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.StatusBar.StatusBarModule.setHidden),
                            new NativeMethod("async", (instance, args) =>
                                Module.setHidden(
                                    args[0].ToObject<System.Boolean>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.StatusBar.StatusBarModule.setColor),
                            new NativeMethod("async", (instance, args) =>
                                Module.setColor(
                                    args[0].ToObject<System.UInt32?>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.StatusBar.StatusBarModule.setTranslucent),
                            new NativeMethod("async", (instance, args) =>
                                Module.setTranslucent(
                                    args[0].ToObject<System.Boolean>()
                                )
                            )
                        },
                    };
                }
            }
        }
        class VibrationModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Vibration.VibrationModule>
        {
            public VibrationModuleWrapper(ReactNative.Modules.Vibration.VibrationModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Vibration.VibrationModule.vibrate),
                            new NativeMethod("async", (instance, args) =>
                                Module.vibrate(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Vibration.VibrationModule.cancel),
                            new NativeMethod("async", (instance, args) =>
                                Module.cancel(
                                )
                            )
                        },
                    };
                }
            }
        }
        class WebSocketModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.WebSocket.WebSocketModule>
        {
            public WebSocketModuleWrapper(ReactNative.Modules.WebSocket.WebSocketModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.WebSocket.WebSocketModule.connect),
                            new NativeMethod("async", (instance, args) =>
                                Module.connect(
                                    args[0].ToObject<System.String>(),
                                    args[1].ToObject<System.String[]>(),
                                    (Newtonsoft.Json.Linq.JObject)args[2],
                                    args[3].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.WebSocket.WebSocketModule.close),
                            new NativeMethod("async", (instance, args) =>
                                Module.close(
                                    args[0].ToObject<System.UInt16>(),
                                    args[1].ToObject<System.String>(),
                                    args[2].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.WebSocket.WebSocketModule.send),
                            new NativeMethod("async", (instance, args) =>
                                Module.send(
                                    args[0].ToObject<System.String>(),
                                    args[1].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.WebSocket.WebSocketModule.sendBinary),
                            new NativeMethod("async", (instance, args) =>
                                Module.sendBinary(
                                    args[0].ToObject<System.String>(),
                                    args[1].ToObject<System.Int32>()
                                )
                            )
                        },
                    };
                }
            }
        }
    }
}
